[["index.html", "DH tutorials Chapter 1 Hello world", " DH tutorials AA 2022-04-21 Chapter 1 Hello world In the research group for the Congregation of the Council we work on a variety of digital humanities projects, which include such applications as interactive multitasking book catalogues, glossaries, interactive timeline and mapping projects on micro and macro levels. The reason, why I decided to write this series of tutorial is a retrospective view on the first steps of our projects the development. Scholars in history have to face very specific issues, related to the visualization of the data that more likely need some advanced coding experience, some creative approach and technical knowledge. Since these issues are not common in the coding handbooks and more likely, historians will have to create the own solution for visualizing the historical data, I decided to make a cookbook, which will explain some specific issues that I had to solve during the working process. Among the challenges for visualizing of the historical data, I would like to focus on such questions as how to visualize the data in time? How to show historical uncertainty? How to visualize changing space in its historical context? These questions come in the workflow of our projects and I would like to propose several approaches that can be useful for solving non-trivial issues in the development of DH projects.1 The main programming language of all the projects is R. I chose R for a couple of reasons. R is a common and standard language in academic disciplines. A wide spectrum of academic areas use R on a daily basis, from bioinformatics to social science. I would also propose R for the DH workflow, becasue of flexibility, simplicity and multitasking of R libraries. In addition, such accompanying instruments as RMarkdown, shinyapps and RStudio in general provide users and developers a friendly environment for academic publishing and development. As the main audience of R users involves scholars, researchers and students, this manual will cover predomenantly particular issues, related to the challenges that I had to approach during my studies and development, but not R and its instruments in general. "],["what-is-r-for-historians.html", "Chapter 2 What is R for historians? 2.1 What are the aims of data visualization? 2.2 What kind of historical data can be potentially visualized in R?", " Chapter 2 What is R for historians? In this part I shall briefly explain some fundamentals of visualization in R with a focus of how R instruments can be used for historical research. R is a great language for data visualization. Since it was created as a statistical language, R has well developed, clear and simple set of instruments for graphic visualization. Here I shall show some examples of very basic instruments of visulaization in R, their advantages and limitations, and how they can be used in historical visualization. In this part I aim to give some general overview of the question that will be considered in details in further chapters. Historians deal with a specific kind of data. Often, the exact information is missed. For instance, we have only a period of time, but not an exact date for many events. In addition, we have entities that correspond several categories, for example, for the A event there were several groups of participants. Finally, the event A happened in a place, which location is unclear or does not exist anymore. All these challenges can be solved in R libraries. However, it needs some creative approach and coding above standard R libraries. 2.1 What are the aims of data visualization? There are several aims of the data visualization. Firstly, a graphic presentation of the data aims to show readers and researchers a clear image of the data, which was obtained within the research. Historians (alike social scientists) deal with the abstract information, not physical. For instance, we need to operate with some demographical statistics for a certain period in history, presented as a table with years and population numbers. Let’s have a look at the statistics for New York population in 1800-1870 This little table looks good and clear enough, however, more likely social historians will have thousands of entities, categorizes in various group. For a cognitive perspective, a graphic image is more clear and preferable for demonstration of the abstract information, because it allow to imagine the abstract data in physical categories, such as length, size, etc. On this graphic image the crucial dynamics of population growing is visible in a crearer way. This example is typical for statistical data, however, statistics is not the only kind of data, which can be visualized for giving an optimal way of demonstration. Geographical data is even brighter example, because the visualizations converts abstract longitudes and latitudes into a point on the map. For example, let’s imagine some data of geography of Spain: These elementary examples show some basic instruments of visualization in the case if we have exact information about an event, phenomena or unit. Missed information or dubious information, while different sources provide different evidences is one of the challenges of the historical data that we will examine in next parts. Secondly, the aim of visualization is providing a material for data analysis. A graphic image, especially in the case of thousands of entities provides opportunities to see a context and behaviour of particular entity in a comparative perspective, showing tendencies and dependencies of the whole data. 2.2 What kind of historical data can be potentially visualized in R? Historians operate with tons of various information and its context. The context accordingly can include a local level and cover a specific geographical territory, legal and cultural space, or a particular period of time. However, the data can be also considered in a global comparative context, which includes relationships with other spaces and periods. Historical data often does not provide accurate numbers. Moreover, historians often deal with not only numerical data. For instance, if we need to visualize connections between actors or a genealogy of the concept. Statistics and geography is not only the data, which can be visualized using R instruments. "],["from-soul-to-body-what-is-the-optimal-format-for-the-task.html", "Chapter 3 From soul to body: what is the optimal format for the task? 3.1 Static graphics 3.2 App 3.3 Markdown 3.4 Other methods", " Chapter 3 From soul to body: what is the optimal format for the task? 3.1 Static graphics 3.2 App 3.3 Markdown 3.4 Other methods "],["what-r-can-make-what-cannot-and-what-its-possible-but.html", "Chapter 4 What R can make, what cannot and what ‘it’s possible, but…’?", " Chapter 4 What R can make, what cannot and what ‘it’s possible, but…’? In order to see, what R can do, what can’t and what ‘can, but still..’ let’s start from the most common library for graphic visualization in R ggplot2 "],["ggplot2-for-history-advantages-and-challenges.html", "Chapter 5 ggplot2 for history: advantages and challenges 5.1 Historical data and graphic libraries", " Chapter 5 ggplot2 for history: advantages and challenges ggplot2 gives lots of instruments to create any kind of graph on the basis of dataset, coordinate system and geoms, i.e. visual presentation of the data. Accordingly ggplot2consists of several basic components: data, aesthetics and coordinates: Ggplot(data) + &lt;geom_function&gt;(mapping = aes(&lt;mappings&gt;), stat, position) + &lt;coordinate_function&gt; + &lt;facet_function&gt; + &lt;scale_function&gt; + &lt;theme_function&gt; It is highly customizable and allows to render typographic ready graphs. However ggplot2 graphics is less interactive and more static that make ggplot2 relatively fast but also less friendly to users, if one needs something more than an image and wish to add some dynamic parameters. A static approach works perfectly for visualization of thousands entities on the graph and creating an image of the tendencies or picture in general. Nevertheless, on the basis of a static image user cannot interact with each particular entity that might be essencial for historical visualization, when the aim is to show a particular element, which contains a lot of information, in the context of the system or it’s relationships with other elements. For instance, implementing such a simple element as popup for a point, which will bring more detailed information about this particular entity, for example, year, title in the source, brief description, needs an additional JavaScript extension, because by default this function is absent in a standard ggplot2 library. A selection of a particular entity is not possible by default either, however it can be added manually in a form of brush, where the output with the data will be shows as an another elemtnt - a data table, a plain text, etc. It is commonly used in ggplot2 visualization and in documentation it looks: brushedPoints(df, brush, xvar = NULL, yvar = NULL, panelvar1 = NULL, panelvar2 = NULL, allRows = FALSE) For implementing this element, we need to do a couple of manipulations. First of all, it can be made only within shiny framework, which I will consider in details in the next part of the tutorial. Secondly, on a very basic level this approach means that in the dataset, the categories suggested for x and y axis might be only single that’s often not the case for historical data. For example, we would like to visualize a dataset, which contains the information about revolutions in some period of history. We have titles, years and key groups of participants. Everything works fine until the moment, when we discover that in some entities we have more than one group of participants. How shall we explain the R that we need to put this particular entity into two groups? Let’s discuss this question in the next part, which focuses on historical data specifics and how to approach it in an optimal way. 5.1 Historical data and graphic libraries Historical datasets contain significant element of uncertainty that’s distinguish historical dataset from other types of the data. It is caused by sources that can contain different information about events, persons and locations. In addition, historical entities ofter correspond several categories that need be reflected in visual presentation and searching options. Among our projects, I worked with this sorts of entities, which contained as uncertain data as corresponded several parameters. Here there an examples: This is a presentation of the .bib file in the format of the data table. In the column ‘Keywords’ we see that journal articles correspond several categories. How could we present them in a graphic way? For example we would like to see only the sources among these entities and exclude other categories. In this case, ggplot2 would need some extension, because otherwise R will not see a comma. I suggest to use interactive shiny app. Let’s create a simple shiny structure with our data, UI and server. For the libraries we need only shiny, ggplot2 and DT. "],["mapping-in-leaflet-with-raster-historical-layers.html", "Chapter 6 Mapping in Leaflet with raster historical layers 6.1 Preparing the dataset and making a simple map 6.2 Marking an application and adding a raster image 6.3 Conclusion", " Chapter 6 Mapping in Leaflet with raster historical layers In this area I would like to consider some specific issues that could appear before a researcher, who needs to visualize the spatial data, using historical landscape. Some issues I would like to address to myself, when I started to examine and work on this topic raise such questions as: What mapping libraries we can use and what are the advantages and disadvantages in general and for historical mapping in particular? Ggplot2 Plotly Leaflet Mapbox How to visualize historical layers at the design level? Basically, what kind of pitfalls we can expect on the micro and macro level of historical mapping visualization? Micro and Macro levels on the map Projections and errors of historical originals and historical reconstructions: - Raster historical and reconstructed maps -Vector maps How to visualize history at the technical level? Pitfalls of historical mapping in R and ways of their solution In the beginning was the Word: organizing the dataset in an optimal way for further proceeding String vars Numeric vars Double vars 6.1 Preparing the dataset and making a simple map Let’s think of possible questions that are risen before a historian, who has some data, related to the space. It will be useful to visualize them as on the map. For instance, we have a table, which contains some geographical names that can be easily identified with longitudes and latitudes. For example, we have an example of 5 entities with Italian cities that simply can be visualized on a modern map. Let’s use the most popular library for mapping - leaflet. It’s a simple, powerful, flexible and highly customizable library, which allows to make awesome maps. ## City long lat Province ## 1 Madrid -3.703889 40.41250 Area metropolitana ## 2 Cordoba -4.778700 37.88680 Andalusia ## 3 Segovia -4.118333 40.94806 Castilia y Leon ## 4 Santiago de Compostela -8.544444 42.87778 Galicia ## 5 Santander -3.805000 43.46278 Cantabria The code of this very basic map is simple. First, you need to create a map and cast leaflet function. Use magritte %&gt;% to connect functions without multiple calling. Then, create a basemap via addTiles(). For the next step, let’s add our points. Since we have already prepared a dataset, we will use it with an operator $ which will indicate on particular columns with geodata. We basically need two columns: lng and lat, but we can also add a popup for our points. Therefore, we need to use lng=spain_sample$long, lat=spain_sample$lat that R understand, which columns contain the information about coordinates. install.packages(&quot;leaflet&quot;) map &lt;- leaflet() %&gt;% addTiles() %&gt;% # Default OpenStreetMap basemap addMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup=spain_sample$Province&quot;) map This is a basic basemap, but you can add any other map own via addProviderTiles(). Let’s use something not very typical for maps, for instance a watercolor basemap, provided by Stamen. map &lt;- leaflet() %&gt;%` addProviderTiles(&quot;Stamen.Watercolor&quot;) %&gt;% # All Stamen maps avalible in http://maps.stamen.com NOTE use &quot;&quot; for adding custom maps addMarkers(lng=spain_sample$long, lat=spain_sample$lat,` popup=spain_sample$Province&quot;)` map And we will get an artistic result. 6.2 Marking an application and adding a raster image As we already know how to make very basic maps, we can now create a map with a raster layer above, without maintaining a Web Map Server, which store geographical data. I found a map in David Rumsey Historical Map Collection a map in David Rumsey Historical Map Collection Spain in Portugal in the 19th century (1832). This resource has enormous number of historical maps, which can be exported as jpg or geotiff. We need jpg. I cuted this image in Photoshop and saved it as .png. What we need first, is to define, if we wish to make the app. For doing this, let’s create a Shiny App, via File &gt; New File. RStudio will offer you to create a directory, where RStudio will storage the project and where you can add resources for the app. You will get a standard shiny layout with UI - user interface with graphic elements, and server part, where we will implement our functions. There is a huge variety of shiny extensions, but we will use just basics. library(shiny) # Define UI for application that draws a histogram ui &lt;- fluidPage( # Application title titlePanel(&quot;Old Faithful Geyser Data&quot;), # Sidebar with a slider input for number of bins sidebarLayout( sidebarPanel( sliderInput(&quot;bins&quot;, &quot;Number of bins:&quot;, min = 1, max = 50, value = 30) ), # Show a plot of the generated distribution mainPanel( plotOutput(&quot;distPlot&quot;) ) ) ) # Define server logic required to draw a histogram server &lt;- function(input, output) { output$distPlot &lt;- renderPlot({ # generate bins based on input$bins from ui.R x &lt;- faithful[, 2] bins &lt;- seq(min(x), max(x), length.out = input$bins + 1) # draw the histogram with the specified number of bins hist(x, breaks = bins, col = &#39;darkgray&#39;, border = &#39;white&#39;) }) } # Run the application shinyApp(ui = ui, server = server) We need to create our own app with our data that deploy it in the future. Basically we need only the list of libraries, UI and server, so delete the content of Shiny app example. Let’s add our other libraries we need. We will need leaflet, DT for operations with datatables and htmlwidgets for adding a JavaScript function, I will explain it further. library(shiny) library(leaflet) library(DT) library(htmlwidgets) ui &lt;- fluidPage( # Application title titlePanel(&quot;Map app&quot;), mainPanel() ) server &lt;- function(input, output) { } shinyApp(ui = ui, server = server) We need to create our own app with our data that deploy it in the future. Basically we need only the list of libraries, UI and server, so delete the content of Shiny app example. At this moment this app is empty. Let’s add the data. First of all, we need to place our map on the main panel and use mainPanel(leafletOutput(\"map\")). Then, let’s move to the server part, where we explain R, what is the ‘map’ we call. For doing this, we define “map” via output and indicate “map” using $. Then, the code will be the same as we created before. output$map &lt;- renderLeaflet({ leaflet() %&gt;% addProviderTiles(&quot;Stamen.Watercolor&quot;) %&gt;% addMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup=spain_sample$Province) }) But for adding a raster layer, we need to do a certain trick. First of all, we should create a folder indise our project www where we will collect raster maps. In this case, our project will look so: Then, let’s create a function, which will add a raster image to the map. It’s an additional function, created in JavaScript. We should use htmlwidgets library and onRender function, where we will add our image and its borders. I already prepared the coordinates. Note, these coordinates represent a diagonal between the lowest left and highest right points. htmlwidgets::onRender(&quot; function(el, x) { var map = this; var imageUrl = &#39;map_spain.png&#39;; var imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]]; L.imageOverlay(imageUrl, imageBounds).addTo(map); } &quot;) Note, this maps is not super accurate that’s connceted with projection errors. For avoiding it, we can use Georefferencing for modern (19th century and below) maps. But it’s a separate topic. For now let’s make more advanced popups with additional information. For this we shall use htmlwidgets too, because we will pack the information about the point inside a html container. For making it, we will use paste and present the data we wish to show if we are working on html page: addMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup = paste(&#39;&lt;font face=&quot;helvetica&quot;&#39;, &#39;&lt;font size=&quot;3&quot;&gt;&#39;, &#39;&lt;strong&gt;&#39;, spain_sample$Province, &#39;&lt;/strong&gt;&#39;, &#39;&lt;/font&gt;&#39;, &#39;&lt;br/&gt;&#39;,&#39;&lt;strong&gt;&#39;, &#39;City: &#39;, &#39;&lt;/strong&gt;&#39;, spain_sample$City, &#39;&lt;/font&gt;&#39;,&#39; &#39;)) For the last thing, let’s add style to our map and make it for the whole screen. tags$style(type = \"text/css\", \"#map {height: calc(90vh - 80px) !important;}\") In total, our application sould be like this example: library(shiny) library(readr) library(DT) library(leaflet) #data spain_sample &lt;- read_delim(&quot;spain_sample.csv&quot;, delim = &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ui &lt;- fluidPage( #Application style. tags$style(type = &quot;text/css&quot;, &quot;#map {height: calc(90vh - 80px) !important;}&quot;), # Application title titlePanel(&quot;Map app&quot;), mainPanel(leafletOutput(&#39;map&#39;)) ) server &lt;- function(input, output) { output$map &lt;- renderLeaflet({ leaflet() %&gt;% addProviderTiles(&quot;Stamen.Watercolor&quot;) %&gt;% addMarkers(lng=spain_sample$long, lat=spain_sample$lat, popup = paste(&#39;&lt;font face=&quot;helvetica&quot;&#39;, &#39;&lt;font size=&quot;3&quot;&gt;&#39;, &#39;&lt;strong&gt;&#39;, spain_sample$Province, &#39;&lt;/strong&gt;&#39;, &#39;&lt;/font&gt;&#39;, &#39;&lt;br/&gt;&#39;,&#39;&lt;strong&gt;&#39;, &#39;City: &#39;, &#39;&lt;/strong&gt;&#39;, spain_sample$City, &#39;&lt;/font&gt;&#39;,&#39; &#39;)) %&gt;% htmlwidgets::onRender(&quot; function(el, x) { var map = this; var imageUrl = &#39;map_spain.png&#39;; var imageBounds = [[35.798941, -10.478349], [44.037202, 4.733163]]; L.imageOverlay(imageUrl, imageBounds).addTo(map); } &quot;) }) } # Run the application shinyApp(ui = ui, server = server) 6.3 Conclusion We finihed this little app and added a historical map without implementing a WMS layer. This sentence will be printed as a footnote.↩︎ "]]
